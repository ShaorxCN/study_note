
并发模型
    OS 线程 ：依赖系统线程  可以基于线程池优化 但是还是切换消耗大  同步困难
    事件驱动: 回调慢 性能高 适合非线性任务
    协程: 方便使用 支持大量任务 切换快 同步方便 但是基于自己的运行时
    actor：类型分布式系统 不管是线程还是协程  都是通过消息传递同步 比如mapreduce 但是实践需要时间
异步编程:
    并不是说和多线程对立 而是和同步相对 不必等任务结束有反馈再自己结束让出资源 比如上面的回调 事件驱动也有回调
    async/await 这就是rust的 其实也是类似协程？或者可以通过类似协程的运行时来做 增加任务数量


IO密集选async CPU密集选线程

主要是future trait

async 代码块变为future状态

包含这个的类型 就默认变为不是先Unpin
pub struct PhantomPinned;

use std::marker::PhantomPinned;
struct Test {
    a: String,
    b: *const String,
    _marker: PhantomPinned,
}
