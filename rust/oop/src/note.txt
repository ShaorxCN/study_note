pub trait xxx{
    xxx
}


Box<dyn xxx>


运行时动态派发

trait对象需要时安全得trait
如果一个trait中定义的所有方法满足下面两条规则，那么这个trait就是对象安全的：
• 方法的返回类型不是Self。
• 方法中不包含任何泛型参数。

理由就是因为和泛型不一样 无法提前在编译期间知道具体得类型。所以无法完成2得泛型填充 Self则是一个类型得别名 无法提前知道自己 也无法替换


比如 trait Clone就是不安全得

pub trait Clone{
    fn clone(&self)->Self;
}


状态模式

一个值拥有的内部状态由数个状态对象（state object）表达而成，而值的行为则随着内部状态的改变而改变。
这种设计模式会通过状态对象来共享功能：相对应地，Rust使用了结构体与trait而不是对象与继承来实现这一特性。
每个状态对象都会负责自己的行为并掌控自己转换为其他状态的时机。
而持有状态对象的值则对状态的不同行为和状态转换的时机一无所知。


这个示例会采用增量式的开发过程来实现一个用于发布博客的工作流程。这个博客最终的工作流程如下：
1. 在新建博客文章时生成一份空白的草稿文档。
2. 在草稿撰写完毕后，请求对这篇草稿状态的文章进行审批。
3. 在文章通过审批后正式对外发布。
4. 仅返回并打印成功发布后的文章，而不能意外地发布没有通过审批的文章。

文章状态





