virtual box

VBoxManage.exe convertdd xxx.bin/img xxx.vdi

ABI application binary interface
AEE application execution environment 应用执行环境 
SBI supervisor binary interface   监督模式二进制接口


普通控制流 常规代码级别
异常控制流 比如应用调用了系统调用 产生了执行环境得切换 这种突变 称为异常控制流

从硬件角度看普通和异常控制流
把控制流在执行完某指令时的物理资源内容，
即确保下一时刻能继续 正确 执行控制流指令的物理资源内容称为控制流的 上下文 (Context) ，也可称为控制流所在执行环境的状态。

如果一个控制流属于某个函数，那么这个控制流的上下文简称为函数调用上下文。
如果一个控制流属于某个应用程序，那么这个控制流的上下文简称为应用程序上下文。
如果把某 进程 看做是运行的应用程序，那么这个属于某个应用程序的控制流可简称为某进程上下文。
如果一个控制流属于操作系统，那么这个控制流的上下文简称为操作系统上下文。
如果一个控制流是属于操作系统中处理中断/异常/陷入的那段代码，那么这个控制流的上下文简称为中断/异常/陷入的上下文。

对于异常控制流的上下文保存与恢复，主要是通过 CPU 和操作系统（手动编写在栈上保存与恢复寄存器的指令）来协同完成；
对于函数转移控制流的上下文保存与恢复，主要是通过编译器（自动生成在栈上保存与恢复寄存器的指令）来帮助完成的。 比如编译时

操作系统 三类异常控制流
外设中断 比如时钟中断 控制台中断等  异步产生 cpu收到中断信号考虑是否处理
异常 异常 (Exception) 是在处理器执行指令期间检测到不正常的或非法的内部事件（如除零错、地址访问越界）。产生异常后，操作系统需要进行异常处理，
     这会破坏被打断前应用程序的控制流上下文，所以操作系统要保存与恢复被打断前应用程序的控制流上下文。


陷入 (Trap) 是在程序中使用请求操作系统服务的系统调用而引发的有意事件。产生陷入后，操作系统需要执行系统调用服务来响应系统调用请求，
         这会破坏陷入前应用程序的控制流上下文，所以操作系统要保存与恢复陷入前应用程序的控制流上下文。


地址空间 (Address Space) 是对物理内存的虚拟化和抽象，也称虚存 (Virtual Memory)。它就是操作系统通过处理器中的内存管理单元 (MMU, Memory Management Unit) 硬件的支持而给应用程序和用户提供一个大的（可能超过计算机中的物理内存容量）、
连续的（连续的地址空间编址）、私有的（其他应用程序无法破坏）的存储空间。
这需要操作系统将内存和外存（即持久存储，硬盘是一种典型的外存）结合起来管理，为用户提供一个容量比实际内存大得多的虚拟存储器，并且需要操作系统为应用程序分配内存空间，
使用户存放在内存中的程序和数据彼此隔离、互不侵扰。操作系统中的虚存管理与处理器的 MMU 密切相关,在启动虚存机制后，
软件通过 CPU 访问的每个虚拟地址都需要通过 CPU 中的 MMU 转换为一个物理地址来进行访问



文件 (File) 主要用于对持久存储的抽象，并进一步扩展到为外设的抽象。
具体而言，文件可理解为存放在持久存储介质（比如硬盘、光盘、U盘等）上，方便应用程序和用户读写的数据。
以磁盘为代表的持久存储介质的数据访问单位是一个扇区或一个块，而在内存中的数据访问单位是一个字节或一个字。
这就需要操作系统通过文件来屏蔽磁盘与内存差异，尽量以内存的读写方式来处理持久存储的数据。当处理器需要访问文件中的数据时，
可通过操作系统把它们装入内存。文件管理的任务是有效地支持文件的存储、 检索和修改等操作。

从一个更高和更广泛的层次上看，各种外设虽然差异很大，但也有基本的读写操作，可以通过文件来进行统一的抽象，
并在操作系统内部实现中来隐藏对外设的具体访问过程，从而让用户可以以统一的文件操作来访问各种外设。
这样就可以把文件看成是对外设的一种统一抽象，应用程序通过基本的读写操作来完成对外设的访问。


操作系统的特征

虚拟化
    内存虚拟化 因为可用的物理地址是动态变化的 编译器和链接器固定一个虚拟地址(通过MMU)但是虚拟地址和物理地址的动态映射是操作系统维护的
    这样 常量 函数符号等可以在编译的时候确定位置
    MMU:memory Management unit  硬件模块 cpu通过该单元管理访问硬件
    不仅是内存地址的虚拟化 还有大小的虚拟化 比如不够用的时候可以通过将使用频率较低的内存释放出来(其中数据可以持久化到硬盘上)


    cpu虚拟化 主要就是分时系统
并发性  类似cpu虚拟化  时间片轮盘 
异步性  系统调用和中断 会打断当前执行的指令顺序。
共享性  感觉还是和虚拟化相关 共享资源 当然还是有限制的  读没啥问题 写写 或者读写 还是互斥的。实际读应该也是通过分时安排的？
持久性  比如内存数据到硬盘的持久化