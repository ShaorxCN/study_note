cpu可以读写的目标
1.寄存器
2.内存单元
3.端口

cpu通过端口地址定位端口
cpu一般是16位确定端口 所以最多65535个端口

端口读写指令
in 和 out分别表示从端口读取数据和往端口写入数据

in al,60h ;从60h端口读入一个字节
1.cpu通过地址总线将60h发出
2.cpu通过控制线发出读端口指令 选中端口所在芯片 并通知他从中读取数据
3.端口所在芯片将60h端口中的数据通过数据总线送入cpu

in和out只能使用ax或者al操作数据 8位用al 16位用ax

0-255以内的端口可以直接字面操作
258-65535端口号放在dx中
mov dx,3f8h
in al,dx
out dx,al

CMOS RAM芯片 或者简称位CMOS
内部有一个实时钟和一个RAM存储器(128字节) 一般0-0dh保存时间信息 其他配置信息 供BIOS读取
该芯片内部俩端口 70h和71h 70h是地址端口 存放要访问的CMOSram单元的地址 71存放读取或者写入的数据


shl和shr指令
shl左移位指令 将一个寄存器或者内存单元数据左移  将最后移出的一位写入cf 最低位用0补充

mov al,01001000b
shl al,1

al= 10010000b cf=0 移动位数大于 将位数放入cl中
mov al,01001000b
mov cl,3
shl al,cl  => al=01000000 cf=0

shr是右移  逻辑同shl最高位用0填充


CMOS中 年月日时分秒 每个分别是一字节 位置分别是 024789号  然后都是BCD码存储 也就是一个4位2进制表示一个10进制 然后高位的bcd表示十位数字


外中断
外设芯片向cpu发送的中断信息 cpu处理完当前指令后 响应外部中断
1.可屏蔽中断
if=0 cpu可以不响应这类中断 处理过程和内中断类似
2.不可屏蔽中断
cpu收到后 在执行完当前指令后 立刻中断  这类中断类型码固定为2
这类中断处理比较特殊 
首先没有第一步 中断类型码的获取 所以自然也不是通过中断向量表  直接cs=0ah ip=8
过程如下:
1.标志寄存器入栈  if=0 tf=0
2.cs ip入栈
3.cs=0ah ip=8
几乎所有外设引发的中断都是可屏蔽中断

比如键盘
主板上关于键盘的相关芯片寄存器是60h
按下的时候产生一个扫描码送入60h 称为通码 第七位为0  松开也会产生一个送入 称为断码 第七位为1 都是一个字节的长度
断码=通码+80h

g的通码是22h 断码是a2h

键盘输入送达60h端口时  相关芯片会向cpu发送中断类型码为9的可屏蔽中断 cpu检测到后 如果if=1则响应 引发中断 然后执行int9的中断例程
int 9的过程
1.读处60h中的扫描码
2.如果时字符键 将扫描码和他对应的字符码（ascii）送入内存中的BIOS键盘缓冲区 如果时控制键比如ctrl和切换键如capslock的扫描码
将其转换为状态字节 写入内存中存储状态字节的单元
3.对键盘系统进行相关的控制 比如 向相关芯片发出应答消息

bios键盘缓冲区可以存储15个键盘输入 一个键盘输入用一个字单元存储 高位放扫描码 低位放字节码

0040:17 单元存储键盘状态字节  

0 右shift        1表示按下
1 左shift        1表示按下 
2 Ctrl           1表示按下
3 Alt            1表示按下
4 scrolllock     1表示scroll指示灯亮
5 numlock        1表示小键盘输入的是数字
6 capslock       1表示 输入大写字母
7 insert         1表示处于删除状态
=============

